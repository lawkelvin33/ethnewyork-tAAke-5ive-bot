/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SwapAmountForAddLiquidityParamsStruct = {
  pool: AddressLike;
  tickUpper: BigNumberish;
  tickLower: BigNumberish;
  amount0: BigNumberish;
  amount1: BigNumberish;
  height: BigNumberish;
};

export type SwapAmountForAddLiquidityParamsStructOutput = [
  pool: string,
  tickUpper: bigint,
  tickLower: bigint,
  amount0: bigint,
  amount1: bigint,
  height: bigint
] & {
  pool: string;
  tickUpper: bigint;
  tickLower: bigint;
  amount0: bigint;
  amount1: bigint;
  height: bigint;
};

export type SwapAmountForIncreaseLiquidityParamsStruct = {
  positionManager: AddressLike;
  pool: AddressLike;
  tokenId: BigNumberish;
  amount0: BigNumberish;
  amount1: BigNumberish;
  height: BigNumberish;
};

export type SwapAmountForIncreaseLiquidityParamsStructOutput = [
  positionManager: string,
  pool: string,
  tokenId: bigint,
  amount0: bigint,
  amount1: bigint,
  height: bigint
] & {
  positionManager: string;
  pool: string;
  tokenId: bigint;
  amount0: bigint;
  amount1: bigint;
  height: bigint;
};

export declare namespace IV3SwapRouter {
  export type ExactInputSingleParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    recipient: AddressLike;
    amountIn: BigNumberish;
    amountOutMinimum: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type ExactInputSingleParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    recipient: string,
    amountIn: bigint,
    amountOutMinimum: bigint,
    sqrtPriceLimitX96: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    fee: bigint;
    recipient: string;
    amountIn: bigint;
    amountOutMinimum: bigint;
    sqrtPriceLimitX96: bigint;
  };
}

export declare namespace IUniswapV3Toaster {
  export type ExactInputBySelfParamsStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    fee: BigNumberish;
    amountIn: BigNumberish;
  };

  export type ExactInputBySelfParamsStructOutput = [
    tokenIn: string,
    tokenOut: string,
    fee: bigint,
    amountIn: bigint
  ] & { tokenIn: string; tokenOut: string; fee: bigint; amountIn: bigint };
}

export declare namespace IApproveAndCall {
  export type MintParamsStruct = {
    token0: AddressLike;
    token1: AddressLike;
    fee: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    recipient: AddressLike;
  };

  export type MintParamsStructOutput = [
    token0: string,
    token1: string,
    fee: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    amount0Min: bigint,
    amount1Min: bigint,
    recipient: string
  ] & {
    token0: string;
    token1: string;
    fee: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    amount0Min: bigint;
    amount1Min: bigint;
    recipient: string;
  };
}

export interface UniswapV3ToasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveMax"
      | "exactInputSingle"
      | "exactInputSingleBySelf"
      | "mint"
      | "unwrapWETH9(uint256,address)"
      | "unwrapWETH9(uint256)"
      | "wrapETH"
      | "sweepToken(address,uint256,address)"
      | "sweepToken(address,uint256)"
      | "multicall(bytes32,bytes[])"
      | "multicall(uint256,bytes[])"
      | "multicall(bytes[])"
      | "pull"
      | "getSwapAmountForAddLiquidity"
      | "getSwapAmountForIncreaseLiquidity"
      | "principal"
      | "total"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveMax",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [IV3SwapRouter.ExactInputSingleParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingleBySelf",
    values: [IUniswapV3Toaster.ExactInputBySelfParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [IApproveAndCall.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapWETH9(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepToken(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(bytes32,bytes[])",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(uint256,bytes[])",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall(bytes[])",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAmountForAddLiquidity",
    values: [SwapAmountForAddLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapAmountForIncreaseLiquidity",
    values: [SwapAmountForIncreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "principal",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "total",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approveMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingleBySelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwrapWETH9(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sweepToken(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(bytes32,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(uint256,bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multicall(bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAmountForAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapAmountForIncreaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "principal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "total", data: BytesLike): Result;
}

export interface UniswapV3Toaster extends BaseContract {
  connect(runner?: ContractRunner | null): UniswapV3Toaster;
  waitForDeployment(): Promise<this>;

  interface: UniswapV3ToasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveMax: TypedContractMethod<[token: AddressLike], [void], "payable">;

  exactInputSingle: TypedContractMethod<
    [params: IV3SwapRouter.ExactInputSingleParamsStruct],
    [bigint],
    "payable"
  >;

  exactInputSingleBySelf: TypedContractMethod<
    [params: IUniswapV3Toaster.ExactInputBySelfParamsStruct],
    [bigint],
    "nonpayable"
  >;

  mint: TypedContractMethod<
    [params: IApproveAndCall.MintParamsStruct],
    [string],
    "payable"
  >;

  "unwrapWETH9(uint256,address)": TypedContractMethod<
    [amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  "unwrapWETH9(uint256)": TypedContractMethod<
    [amountMinimum: BigNumberish],
    [void],
    "payable"
  >;

  wrapETH: TypedContractMethod<[value: BigNumberish], [void], "payable">;

  "sweepToken(address,uint256,address)": TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  "sweepToken(address,uint256)": TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish],
    [void],
    "payable"
  >;

  "multicall(bytes32,bytes[])": TypedContractMethod<
    [previousBlockhash: BytesLike, data: BytesLike[]],
    [string[]],
    "payable"
  >;

  "multicall(uint256,bytes[])": TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;

  "multicall(bytes[])": TypedContractMethod<
    [data: BytesLike[]],
    [string[]],
    "payable"
  >;

  pull: TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;

  getSwapAmountForAddLiquidity: TypedContractMethod<
    [params: SwapAmountForAddLiquidityParamsStruct],
    [
      [bigint, bigint, boolean] & {
        amountIn: bigint;
        amountOut: bigint;
        isSwapX: boolean;
      }
    ],
    "view"
  >;

  getSwapAmountForIncreaseLiquidity: TypedContractMethod<
    [params: SwapAmountForIncreaseLiquidityParamsStruct],
    [
      [bigint, bigint, boolean] & {
        amountIn: bigint;
        amountOut: bigint;
        isSwapX: boolean;
      }
    ],
    "view"
  >;

  principal: TypedContractMethod<
    [positionManager: AddressLike, tokenId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        sqrtRatioX96: bigint;
      }
    ],
    "view"
  >;

  total: TypedContractMethod<
    [positionManager: AddressLike, tokenId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        sqrtRatioX96: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveMax"
  ): TypedContractMethod<[token: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "exactInputSingle"
  ): TypedContractMethod<
    [params: IV3SwapRouter.ExactInputSingleParamsStruct],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exactInputSingleBySelf"
  ): TypedContractMethod<
    [params: IUniswapV3Toaster.ExactInputBySelfParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [params: IApproveAndCall.MintParamsStruct],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9(uint256,address)"
  ): TypedContractMethod<
    [amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unwrapWETH9(uint256)"
  ): TypedContractMethod<[amountMinimum: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "wrapETH"
  ): TypedContractMethod<[value: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "sweepToken(address,uint256,address)"
  ): TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sweepToken(address,uint256)"
  ): TypedContractMethod<
    [token: AddressLike, amountMinimum: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(bytes32,bytes[])"
  ): TypedContractMethod<
    [previousBlockhash: BytesLike, data: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(uint256,bytes[])"
  ): TypedContractMethod<
    [deadline: BigNumberish, data: BytesLike[]],
    [string[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "multicall(bytes[])"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "pull"
  ): TypedContractMethod<
    [token: AddressLike, value: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getSwapAmountForAddLiquidity"
  ): TypedContractMethod<
    [params: SwapAmountForAddLiquidityParamsStruct],
    [
      [bigint, bigint, boolean] & {
        amountIn: bigint;
        amountOut: bigint;
        isSwapX: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapAmountForIncreaseLiquidity"
  ): TypedContractMethod<
    [params: SwapAmountForIncreaseLiquidityParamsStruct],
    [
      [bigint, bigint, boolean] & {
        amountIn: bigint;
        amountOut: bigint;
        isSwapX: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "principal"
  ): TypedContractMethod<
    [positionManager: AddressLike, tokenId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        sqrtRatioX96: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "total"
  ): TypedContractMethod<
    [positionManager: AddressLike, tokenId: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount0: bigint;
        amount1: bigint;
        sqrtRatioX96: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
